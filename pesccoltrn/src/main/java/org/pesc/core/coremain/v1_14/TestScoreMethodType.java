//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.25 at 04:54:23 PM PST 
//


package org.pesc.core.coremain.v1_14;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TestScoreMethodType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TestScoreMethodType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Scaled"/>
 *     &lt;enumeration value="Graded"/>
 *     &lt;enumeration value="Standard"/>
 *     &lt;enumeration value="Raw"/>
 *     &lt;enumeration value="Percent"/>
 *     &lt;enumeration value="Mastery"/>
 *     &lt;enumeration value="Adjective"/>
 *     &lt;enumeration value="Stanine"/>
 *     &lt;enumeration value="Percentile"/>
 *     &lt;enumeration value="NormalCurve"/>
 *     &lt;enumeration value="Equated"/>
 *     &lt;enumeration value="Local"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TestScoreMethodType")
@XmlEnum
public enum TestScoreMethodType {

    @XmlEnumValue("Scaled")
    SCALED("Scaled"),
    @XmlEnumValue("Graded")
    GRADED("Graded"),
    @XmlEnumValue("Standard")
    STANDARD("Standard"),
    @XmlEnumValue("Raw")
    RAW("Raw"),
    @XmlEnumValue("Percent")
    PERCENT("Percent"),
    @XmlEnumValue("Mastery")
    MASTERY("Mastery"),
    @XmlEnumValue("Adjective")
    ADJECTIVE("Adjective"),
    @XmlEnumValue("Stanine")
    STANINE("Stanine"),
    @XmlEnumValue("Percentile")
    PERCENTILE("Percentile"),
    @XmlEnumValue("NormalCurve")
    NORMAL_CURVE("NormalCurve"),
    @XmlEnumValue("Equated")
    EQUATED("Equated"),
    @XmlEnumValue("Local")
    LOCAL("Local");
    private final String value;

    TestScoreMethodType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TestScoreMethodType fromValue(String v) {
        for (TestScoreMethodType c: TestScoreMethodType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
